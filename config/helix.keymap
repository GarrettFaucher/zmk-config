/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &kp K_PLAY_PAUSE  &kp K_PREV  &kp K_NEXT  &kp C_VOL_DN  &kp C_VOLUME_UP                      &trans     &trans     &trans     &trans      &trans     &trans
&kp F1      &kp F2            &kp F3      &kp F4      &kp F5        &kp F6                               &trans     &trans     &trans     &trans      &trans     &trans
&kp F7      &kp F8            &kp F9      &kp F10     &kp F11       &kp F12                              &trans     &trans     &trans     &trans      &trans     &trans
&kp F13     &kp F14           &kp F15     &kp F16     &kp F17       &kp F18          &kp F19   &kp F20   &trans     &trans     &trans     &trans      &trans     &trans
&kp F21     &kp F22           &kp F23     &kp F24     &mo 1         &mo 2            &mo 3     &trans    &trans     &trans     &trans     &trans      &trans     &trans
            >;
        };

        lower_layer {
            bindings = <
&trans     &trans    &trans  &trans    &trans    &trans                           &trans     &trans     &trans     &trans    &trans    &trans
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                        &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans     &trans    &trans  &trans    &trans    &trans                           &trans     &kp UNDER  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE
&trans     &trans    &trans  &trans    &trans    &trans     &kp LPAR    &kp RPAR  &trans     &trans     &trans     &kp HOME  &kp END   &trans
&trans     &trans    &trans  &trans    &trans    &trans     &trans      &trans    &trans     &trans     &trans     &trans    &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&trans     &trans  &trans  &trans  &trans   &trans                     &trans   &trans     &trans      &trans        &trans        &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4   &kp N5                     &kp N6   &kp N7     &kp N8      &kp N9        &kp N0        &kp DEL
&trans     &kp F1  &kp F2  &kp F3  &kp F4   &kp F5                     &kp F6   &kp MINUS  &kp EQUAL   &kp LBKT      &kp RBKT      &kp BSLH
&trans     &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &trans    &trans  &kp F12  &trans     &kp PSCRN   &kp PG_DN     &kp PG_UP     &trans
&trans     &trans  &trans  &trans  &trans   &trans   &trans    &trans  &trans   &trans     &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP
            >;
        };

        adjust_layer {
            bindings = <
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT                           &kp CARET        &kp AMPS         &kp ASTRK        &kp LPAR         &kp RPAR         &ext_power EP_TOG
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                        &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG
&bt BT_NXT  &out OUT_TOG  &out OUT_USB  &out OUT_BLE  &trans        &trans                              &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &trans
&bt BT_PRV  &trans        &trans        &trans        &trans        &trans        &kp LBRC    &kp RBRC  &trans           &trans           &trans           &trans           &trans           &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans      &trans    &trans           &trans           &trans           &trans           &trans           &trans
            >;
        };
    };
};
